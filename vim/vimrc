" plugin
source $HOME/.dot/vim/neobundle
source $HOME/.dot/vim/neocomplcache

" vimrc
set nocompatible
filetype indent plugin on
syntax on
set number
set list
set listchars=tab:>.,trail:-,extends:\
set nobackup
set noswapfile
set hidden
set wildmenu
set showcmd
set showmode
set hlsearch
set incsearch
set ignorecase
set smartcase
set history=21000
set backspace=indent,eol,start
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set nostartofline
set ruler
set confirm
set visualbell
set t_vb=
"set mouse=a
set scrolloff=5
set notimeout ttimeout ttimeoutlen=200
set pastetoggle=<F11>

set statusline=%<%f\ %m%r%h%w%y%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%4v\ %l/%L
set laststatus=2
set cmdheight=1

map Y y$
nnoremap <C-L> :nohl<CR><C-L>

"-- highlight command mode
highlight StatusLine guifg=black guibg=cyan gui=none ctermfg=black ctermbg=cyan cterm=none
"-- highlight edit mode
let g:hi_insert = 'highlight StatusLine guifg=black guibg=yellow gui=none ctermfg=black ctermbg=yellow cterm=none'
if has('syntax')
  augroup InsertHook
  autocmd!
  autocmd InsertEnter * call s:StatusLine('Enter')
  autocmd InsertLeave * call s:StatusLine('Leave')
  augroup END
endif

let s:slhlcmd = ''
function! s:StatusLine(mode)
if a:mode == 'Enter'
  silent! let s:slhlcmd = 'highlight '.s:GetHighlight('StatusLine')
  silent exec g:hi_insert
else
  highlight clear StatusLine
  silent exec s:slhlcmd
  redraw
endif
endfunction

function! s:GetHighlight(hi)
  redir => hl
  exec 'highlight '.a:hi
  redir END
  let hl = substitute(hl, '[\r\n]', '', 'g')
  let hl = substitute(hl, 'xxx', '', '')
  return hl
endfunction

"-- utf-8
let &termencoding=&encoding
set termencoding=utf-8
set encoding=utf-8
set fileencodings=utf-8,ucs-bom,iso-2022-jp-3,iso-2022-jp-2,euc-jisx0213,euc-jp,cp932

if &encoding == 'utf-8'
    set ambiwidth=double
endif
